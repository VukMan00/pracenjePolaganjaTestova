/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form.dialog.test;

import components.MyPitanjeTableModel;
import domain.Odgovor;
import domain.Pitanje;
import domain.PitanjeTest;
import domain.Test;
import form.dialog.pitanje.PitanjaForm;
import form.util.FormView;
import form.util.ViewForm;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import session.LocalStorage;
import controller.Communication;
/**
 *
 * @author Vuk
 */
public class TestForm extends javax.swing.JDialog implements ViewForm{

    /**
     * Creates new form TestForm
     */
    private int mode;
    public static boolean visibility = false;
    private final LocalStorage localStorage = LocalStorage.getInstance();
    
    public TestForm(java.awt.Frame parent, boolean modal,int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        populateForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        lblErrorNaziv = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtAutor = new javax.swing.JTextField();
        lblAutorError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMaksPoena = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        btnIzbaci = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPitanja = new javax.swing.JTable();
        btnIzmena = new javax.swing.JButton();
        lblMaksPoenaError = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("jLabel1");

        jLabel1.setText("Id");

        txtId.setEditable(false);
        txtId.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        txtId.setEnabled(false);

        jLabel2.setText("Naziv");

        lblErrorNaziv.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lblErrorNaziv.setForeground(new java.awt.Color(255, 0, 51));
        lblErrorNaziv.setText("jLabel3");

        jLabel3.setText("Autor");

        lblAutorError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lblAutorError.setForeground(new java.awt.Color(255, 0, 0));
        lblAutorError.setText("jLabel4");

        jLabel4.setText("Maksimalna broj poena:");

        jLabel5.setText("Pitanja");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnDodaj.setText("Dodaj pitanje");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnIzbaci.setText("Izbaci pitanje");
        btnIzbaci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbaciActionPerformed(evt);
            }
        });

        tblPitanja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblPitanja);

        btnIzmena.setText("Omoguci izmenu");
        btnIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmenaActionPerformed(evt);
            }
        });

        lblMaksPoenaError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lblMaksPoenaError.setForeground(new java.awt.Color(255, 0, 0));
        lblMaksPoenaError.setText("jLabel6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAutorError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMaksPoena, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)))
                        .addGap(107, 107, 107))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblErrorNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(21, 21, 21)
                                    .addComponent(txtAutor)))
                            .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIzmena)
                            .addComponent(lblMaksPoenaError, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnIzbaci, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorNaziv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAutorError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaksPoena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(6, 6, 6)
                .addComponent(lblMaksPoenaError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIzbaci, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDodaj))
                .addGap(5, 5, 5)
                .addComponent(btnIzmena)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        // TODO add your handling code here:
        setError();
        try {
            Test test = zapamtiTest((Test) localStorage.getItemFromHashMap("Test"));
            Object object = Communication.getInstance().updateTest(test);
            if (!(object instanceof String)) {
                if ((boolean) object) {
                    for (Pitanje pitanje : test.getPitanja()) {
                        PitanjeTest pt = new PitanjeTest(pitanje, test, 30);
                        object = Communication.getInstance().addPitanjeTest(pt);
                        if (!(object instanceof String)) {
                            if ((boolean) object) {
                                System.out.println("Dodato je pitanje na test");
                            } else {
                                System.out.println("Dato pitanje je vec dodato na test");
                            }
                        } else {
                            System.out.println((String) object);
                        }
                    }
                    JOptionPane.showMessageDialog(this, "Sistem je zapamtio test");
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti test");
                }
            } else {
                setTextErrors((String)object);
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti test");
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this, "U polje maxBrojPoena mogu samo brojevi da se unesu!!");
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        try {
            // TODO add your handling code here:
            List<Pitanje> pitanja = (List<Pitanje>) Communication.getInstance().getPitanja();
           
            localStorage.addItemsInHashMap("Pitanja", pitanja);
            PitanjaForm pitanjaDialog = new PitanjaForm(null,true,FormView.FORM_MODEL_GET_QUESTIONS_MODE);
            pitanjaDialog.setTitleForTest(txtNaziv.getText());
            pitanjaDialog.setVisible(true);
            List<Pitanje> vracenaPitanja = (List<Pitanje>) localStorage.getItemFromHashMap("VracenaPitanja");
            
            List<Pitanje> pitanjaTabele = ((MyPitanjeTableModel)tblPitanja.getModel()).getPitanja();
            
            boolean flag;
            for(Pitanje pitanje:vracenaPitanja){
                flag = true;
                for(Pitanje pitanjeTable:pitanjaTabele){
                    if(pitanje.getPitanjeId().equals(pitanjeTable.getPitanjeId())){
                        flag = false;
                    }
                }
                
                if(flag){
                    pitanjaTabele.add(pitanje);
                }
            }
            
            tblPitanja.setModel(new MyPitanjeTableModel(pitanjaTabele));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnIzbaciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbaciActionPerformed
        // TODO add your handling code here:
        
        int[] selectedRows = tblPitanja.getSelectedRows();
        if(selectedRows.length==0){
            JOptionPane.showMessageDialog(this, "Niste izabrali pitanje");
        }
        else{
            MyPitanjeTableModel myPitanjeTableModel = (MyPitanjeTableModel)tblPitanja.getModel();
            List<Pitanje> pitanja = myPitanjeTableModel.getPitanja();
            
            for(int i=0;i<selectedRows.length;i++){      
                try {
                    int testId = Integer.parseInt(txtId.getText());
                    PitanjeTest pt = new PitanjeTest();
                    Pitanje pitanje = new Pitanje();
                    pitanje.setPitanjeId(pitanja.get(selectedRows[i]).getPitanjeId());
                    Test test = new Test();
                    test.setTestId(testId);
                    pt.setPitanje(pitanje);
                    pt.setTest(test);
                    
                    if(Communication.getInstance().deletePitanjeTest(pt)){
                        myPitanjeTableModel.remove(pitanja.get(selectedRows[i]));
                    }
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }    
        }
    }//GEN-LAST:event_btnIzbaciActionPerformed

    private void btnIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmenaActionPerformed
        // TODO add your handling code here:
        prepareEditForm();
        this.mode = FormView.FORM_EDIT_MODE;

    }//GEN-LAST:event_btnIzmenaActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzbaci;
    private javax.swing.JButton btnIzmena;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAutorError;
    private javax.swing.JLabel lblErrorNaziv;
    private javax.swing.JLabel lblMaksPoenaError;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblPitanja;
    private javax.swing.JTextField txtAutor;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtMaksPoena;
    private javax.swing.JTextField txtNaziv;
    // End of variables declaration//GEN-END:variables

    private void populateForm() {
        if(mode == FormView.FORM_ADD_MODE){
            if(kreirajTest()){
                prepareAddForm();
                populateTable();
            }
            else {
                visibility = false;
            }
        }
        else if(mode == FormView.FORM_EDIT_MODE){
            prepareEditForm();
            ucitajTest((Test)localStorage.getItemFromHashMap("Test"));        
        }
        else if(mode == FormView.FORM_VIEW_MODE){
            prepareViewForm();
            ucitajTest((Test)localStorage.getItemFromHashMap("Test"));
        }
        else if(mode == FormView.FORM_REMOVE_MODE){
            prepareRemoveForm();
            ucitajTest((Test)localStorage.getItemFromHashMap("Test"));
        }
        
    }
    
    private boolean kreirajTest() {
        try {
            Test t = new Test();
            t.setAutor("");
            t.setMaxBrojPoena(0);
            t.setNaziv("");
           
            Test test = Communication.getInstance().createTest(t);
            
            if(test == null){
                JOptionPane.showMessageDialog(this, "Sistem ne moze da kreira test");
                return false;
            }
            else{
                txtId.setText(test.getTestId().toString());
                localStorage.addItemsInHashMap("Test", test);
                JOptionPane.showMessageDialog(this, "Sistem je kreirao test");
                return true;
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            return false;
        }
    }

    private Test zapamtiTest(Test test) {
        String naziv = txtNaziv.getText();
        String autor = txtAutor.getText();
        Integer maksimalniBrojPoena = Integer.parseInt(txtMaksPoena.getText());
        
        test.setTestId(Integer.parseInt(txtId.getText()));
        test.setNaziv(naziv);
        test.setAutor(autor);
        test.setMaxBrojPoena(maksimalniBrojPoena);
        
        List<Pitanje> pitanja = new ArrayList<>();
        int[] selectedRows = tblPitanja.getSelectedRows();
          if(mode==FormView.FORM_ADD_MODE){
            for(int i=0;i<selectedRows.length;i++){
                pitanja.add(((MyPitanjeTableModel)tblPitanja.getModel()).getPitanja().get(selectedRows[i]));
            }
        }
        else{
            pitanja = ((MyPitanjeTableModel)tblPitanja.getModel()).getPitanja();
        }
        test.setPitanja(pitanja);
        return test;
    }



    private void ucitajTest(Test test) {
        txtId.setText(Integer.toString(test.getTestId()));
        txtNaziv.setText(test.getNaziv());
        txtAutor.setText(test.getAutor());
        txtMaksPoena.setText(Integer.toString(test.getMaxBrojPoena()));
        List<Pitanje> pitanja = test.getPitanja();
        tblPitanja.setModel(new MyPitanjeTableModel(pitanja));
        
    }  

    private void populateTable() {
        try {            
            List<Pitanje> pitanja = (List<Pitanje>)Communication.getInstance().getPitanja();
            tblPitanja.setModel(new MyPitanjeTableModel(pitanja));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void prepareAddForm(){
        visibility = true;
        lblTitle.setText("Kreiranje testa");
        lblAutorError.setVisible(false);
        lblErrorNaziv.setVisible(false);
        lblMaksPoenaError.setVisible(false);
        txtId.setEditable(false);
        tblPitanja.setEnabled(true);
        btnDodaj.setVisible(false);
        btnIzbaci.setVisible(false);
        btnSacuvaj.setVisible(true);
        btnIzmena.setVisible(false);
    }
    
    public void prepareEditForm(){
        lblTitle.setText("Izmena testa");
        lblAutorError.setVisible(false);
        lblErrorNaziv.setVisible(false);
        lblMaksPoenaError.setVisible(false);
        txtAutor.setEditable(true);
        txtId.setEditable(true);
        txtMaksPoena.setEditable(true);
        txtNaziv.setEditable(true);
        btnDodaj.setVisible(true);
        btnIzbaci.setVisible(true);
        btnSacuvaj.setVisible(true);
        tblPitanja.setEnabled(true);
        btnIzmena.setVisible(false);
    }
    
    public void prepareViewForm(){
        lblTitle.setText("Prikazivanje testa");
        lblAutorError.setVisible(false);
        lblErrorNaziv.setVisible(false);
        lblMaksPoenaError.setVisible(false);
        txtAutor.setEditable(false);
        txtId.setEditable(false);
        tblPitanja.setEnabled(false);
        txtMaksPoena.setEditable(false);
        txtNaziv.setEditable(false);
        btnDodaj.setVisible(false);
        btnIzbaci.setVisible(false);
        btnSacuvaj.setVisible(false);
        btnIzmena.setVisible(true);
    }
    
    private void prepareRemoveForm(){
        lblTitle.setText("Brisanje testa");
        lblAutorError.setVisible(false);
        lblErrorNaziv.setVisible(false);
        lblMaksPoenaError.setVisible(false);
        txtAutor.setEditable(false);
        txtId.setEditable(false);
        txtMaksPoena.setEditable(false);
        txtNaziv.setEditable(false);
        btnDodaj.setVisible(false);
        btnIzbaci.setVisible(false);
        btnSacuvaj.setVisible(false);
        btnIzmena.setVisible(false);
    }

    private void setError() {
        lblAutorError.setVisible(false);
        lblAutorError.setText("");
        lblErrorNaziv.setVisible(false);
        lblErrorNaziv.setText("");
        lblMaksPoenaError.setVisible(false);
        lblMaksPoenaError.setText("");
    }

    private void setTextErrors(String string) {
        String[] arrayExceptions = string.split(",");
        if (!arrayExceptions[0].equals(" ")) {
            lblMaksPoenaError.setVisible(true);
            lblMaksPoenaError.setText(arrayExceptions[0]);
        }
        if (!arrayExceptions[1].equals(" ")) {
            lblAutorError.setVisible(true);
            lblAutorError.setText(arrayExceptions[1]);
        }
        if (arrayExceptions[2] != null) {
            lblErrorNaziv.setVisible(true);
            lblErrorNaziv.setText(arrayExceptions[2]);
        }
    }
    
    
}
