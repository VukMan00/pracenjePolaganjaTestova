/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form.dialog.student;


import components.MyStudentTableModel;
import domain.Pol;
import domain.Polaganje;
import domain.RezultatPolaganja;
import domain.Student;
import form.util.FormView;
import java.awt.event.KeyEvent;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import session.LocalStorage;
import communication.*;
import controller.Communication;

/**
 *
 * @author Vuk
 */
public class StudentViewForm extends javax.swing.JDialog {

    /**
     * Creates new form PretrazivanjeStudenta
     */
    
    private final LocalStorage localStorage = LocalStorage.getInstance();
    private final int mode;
    public StudentViewForm(java.awt.Frame parent, boolean modal,int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        prepareForm();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnPrikaziStudenta = new javax.swing.JButton();
        btnIzmena = new javax.swing.JButton();
        btnIzbrisi = new javax.swing.JButton();
        txtPretrazi = new javax.swing.JTextField();
        btnVratiStudente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Pretrazi studente po polu:");

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStudents);

        btnPrikaziStudenta.setText("Ucitaj");
        btnPrikaziStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziStudentaActionPerformed(evt);
            }
        });

        btnIzmena.setText("Izmena");
        btnIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmenaActionPerformed(evt);
            }
        });

        btnIzbrisi.setText("Izbrisi");
        btnIzbrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbrisiActionPerformed(evt);
            }
        });

        txtPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPretraziActionPerformed(evt);
            }
        });
        txtPretrazi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPretraziKeyPressed(evt);
            }
        });

        btnVratiStudente.setText("Vrati studente");
        btnVratiStudente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVratiStudenteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnPrikaziStudenta, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(btnIzmena, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(42, 42, 42)
                            .addComponent(btnIzbrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1))
                    .addComponent(btnVratiStudente, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrikaziStudenta)
                    .addComponent(btnIzmena)
                    .addComponent(btnIzbrisi))
                .addGap(18, 18, 18)
                .addComponent(btnVratiStudente)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    private void btnPrikaziStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziStudentaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita studenta");
        }
        else{
            
            try {
                JOptionPane.showMessageDialog(this, "Sistem je ucitao studenta");
                
                List<Student> students = ((MyStudentTableModel) tblStudents.getModel()).getStudents();
                Student student = students.get(selectedRow);
                
                List<Polaganje> polaganjaStudenta = new ArrayList<>();
                List<RezultatPolaganja> rezultatiPolaganja = (List<RezultatPolaganja>)Communication.getInstance().getRezultatPolaganja();
                
                for(RezultatPolaganja rp:rezultatiPolaganja){
                    if(rp.getStudent().getId().equals(student.getId())){
                        polaganjaStudenta.add(rp.getPolaganje());
                    }
                }
                
                localStorage.addItemsInHashMap("PolaganjaStudenta", polaganjaStudenta);
                localStorage.addItemsInHashMap("Student", student);
                
                StudentForm studentForm = new StudentForm(null,true,FormView.FORM_VIEW_MODE);
                studentForm.setVisible(true);
                
                populateTable();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            
        }
    }//GEN-LAST:event_btnPrikaziStudentaActionPerformed

    private void btnIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmenaActionPerformed
        // TODO add your handling code here:
        
       int selectedRow = tblStudents.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita studenta");
        }
        else{
           try {
               List<Student> students = ((MyStudentTableModel) tblStudents.getModel()).getStudents();
               Student student = students.get(selectedRow);
               JOptionPane.showMessageDialog(this, "Sistem je ucitao studenta");
               
               List<Polaganje> polaganjaStudenta = new ArrayList<>();
               List<RezultatPolaganja> rezultatiPolaganja = (List<RezultatPolaganja>)Communication.getInstance().getRezultatPolaganja();
               
               for(RezultatPolaganja rp:rezultatiPolaganja){
                   if(rp.getStudent().getId().equals(student.getId())){
                       polaganjaStudenta.add(rp.getPolaganje());
                   }
               }
               localStorage.addItemsInHashMap("PolaganjaStudenta", polaganjaStudenta);
               localStorage.addItemsInHashMap("Student", student);
               StudentForm studentForm = new StudentForm(null,true,FormView.FORM_EDIT_MODE);
               studentForm.setVisible(true);
               
               populateTable();
           } catch (Exception ex) {
               System.out.println(ex.getMessage());
           }
        }
    }//GEN-LAST:event_btnIzmenaActionPerformed

    private void btnIzbrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbrisiActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Sistem ne moze da izbrise studenta");
        }
        else{
            int option = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrisete studenta?");
            if(option==0){
                List<Student> students = ((MyStudentTableModel) tblStudents.getModel()).getStudents();
                Student student = students.get(selectedRow);
                localStorage.addItemsInHashMap("Student", student);
                izbrisiStudenta(student);
            }
        }
    }//GEN-LAST:event_btnIzbrisiActionPerformed

    private void txtPretraziKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretraziKeyPressed
        // TODO add your handling code here:
        MyStudentTableModel myStudentTableModel = (MyStudentTableModel)tblStudents.getModel();
        List<Student> students = myStudentTableModel.getStudents();
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if(txtPretrazi.getText().trim().equals("Musko")){
                nadjiStudente(Pol.Musko, students);
                JOptionPane.showMessageDialog(this, "Sistem je nasao studente po zadatoj vrednosti");
            }
            else if(txtPretrazi.getText().trim().equals("Zensko")){
                nadjiStudente(Pol.Zensko, students);
                JOptionPane.showMessageDialog(this, "Sistem je nasao studente po zadatoj vrednosti");
            }
            else{  
                JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje studente po zadatoj vrednosti");
            }
        }
    }//GEN-LAST:event_txtPretraziKeyPressed

    private void txtPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPretraziActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPretraziActionPerformed

    private void btnVratiStudenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVratiStudenteActionPerformed
        // TODO add your handling code here:
        int[] array = tblStudents.getSelectedRows();
        List<Student> students = new ArrayList<>();
        List<Student> studentsTabel = ((MyStudentTableModel)tblStudents.getModel()).getStudents();
        
        for(int i=0;i<array.length;i++){
            students.add(studentsTabel.get(array[i]));
        }
        
        localStorage.addItemsInHashMap("Studenti", students);
        JOptionPane.showMessageDialog(this, "Studenti su ubaceni u tabelu");
        this.dispose();
    }//GEN-LAST:event_btnVratiStudenteActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzbrisi;
    private javax.swing.JButton btnIzmena;
    private javax.swing.JButton btnPrikaziStudenta;
    private javax.swing.JButton btnVratiStudente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtPretrazi;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        try {
            List<Student> students = (List<Student>)Communication.getInstance().getStudents();
            tblStudents.setModel(new MyStudentTableModel(students));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void nadjiStudente(Pol pol, List<Student> students) {   
        List<Student> students1 = new ArrayList<>();
        for(Student student:students){
            if(student.getPol() == pol){
                students1.add(student);
            }
         }
         
         tblStudents.setModel(new MyStudentTableModel(students1));
    }
    
     private void izbrisiStudenta(Student student) {
        try {
            MyStudentTableModel myStudentTableModel = (MyStudentTableModel)tblStudents.getModel();
            if(Communication.getInstance().deleteStudent(student)){
                myStudentTableModel.remove(student);
                JOptionPane.showMessageDialog(this, "Sistem je izbrisao studenta");
            }
            else{
                JOptionPane.showMessageDialog(this, "Sistem ne moze da izbrise studenta");
            }
            
            populateTable();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    

    private void prepareForm() {
        btnIzmena.setVisible(true);
        btnIzbrisi.setVisible(true);
        btnPrikaziStudenta.setVisible(true);
        btnVratiStudente.setVisible(false);
        
        if(mode==FormView.FORM_MODEL_GET_STUDENTS_MODE){
            btnIzbrisi.setVisible(false);
            btnIzmena.setVisible(false);
            btnPrikaziStudenta.setVisible(false);
            btnVratiStudente.setVisible(true);
        }
               
    } 

  
}
