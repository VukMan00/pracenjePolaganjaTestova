/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form.dialog.odgovor;

import domain.Odgovor;
import domain.Pitanje;
import java.util.logging.Level;
import java.util.logging.Logger;
import session.LocalStorage;
import form.util.FormView;
import javax.swing.JOptionPane;
import controller.Communication;
import validator.IValidator;
import validator.ValidatorException;
import validator.components.OpstiValidator;

/**
 *
 * @author Vuk
 */
public class OdgovorForm extends javax.swing.JDialog {

    /**
     * Creates new form OdgovorForm
     */
    private LocalStorage localStorage = LocalStorage.getInstance();
    private Odgovor odgovor;
    private Pitanje pitanje;
    private int mode;
    private IValidator validator;
    
    public OdgovorForm(java.awt.Frame parent, boolean modal,int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        pitanje = (Pitanje) localStorage.getItemFromHashMap("Pitanje");
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSadrzaj = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        rbTacno = new javax.swing.JRadioButton();
        rbNetacno = new javax.swing.JRadioButton();
        lblErrorSadrzaj = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Kreiranje odgovora");

        jLabel2.setText("Sadrzaj:");

        jLabel3.setText("Resenje:");

        rbTacno.setText("Tacno");

        rbNetacno.setText("Netacno");

        lblErrorSadrzaj.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lblErrorSadrzaj.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorSadrzaj.setText("jLabel4");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        jLabel4.setText("Id:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorSadrzaj, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbTacno, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbNetacno, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSadrzaj, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 35, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSadrzaj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblErrorSadrzaj)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(rbTacno)
                    .addComponent(rbNetacno))
                .addGap(45, 45, 45)
                .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        // TODO add your handling code here:
        setErrors();
        try {
            String sadrzaj = txtSadrzaj.getText();
            boolean resenje = false;
            if (rbTacno.isSelected()) {
                resenje = true;
            } else if (rbNetacno.isSelected()) {
                resenje = false;
            }
            if(mode==FormView.FORM_MODEL_ADD_ANSWER){
                checkErrors(sadrzaj);
                if(!lblErrorSadrzaj.isVisible()){
                    odgovor.setPitanje(pitanje);
                    odgovor.setSadrzaj(sadrzaj);
                    odgovor.setResenje(resenje);
                    localStorage.addItemsInHashMap("Odgovor", odgovor);
                    JOptionPane.showMessageDialog(this, "Uspesno ste dodali odgovor");
                    this.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(this, "Neuspesno dodavanje odgovora");
                }
            }
            if(mode==FormView.FORM_ADD_MODE){
                odgovor.setPitanje(pitanje);
                odgovor.setSadrzaj(sadrzaj);
                odgovor.setResenje(resenje);
                Object object = Communication.getInstance().updateOdgovor(odgovor);
                if(!(object instanceof String)){
                    if((boolean)object){
                        localStorage.addItemsInHashMap("Odgovor", odgovor);
                        JOptionPane.showMessageDialog(this, "Uspesno ste dodali odgovor");
                        this.dispose();
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Neuspesno dodavanje odgovora");
                    }
                }
                else{
                    lblErrorSadrzaj.setVisible(true);
                    lblErrorSadrzaj.setText((String)object);
                    JOptionPane.showMessageDialog(this, "Neuspesno dodavanje odgovora");
                }
            }
            if(mode==FormView.FORM_EDIT_MODE){
                Object object = Communication.getInstance().updateOdgovor(odgovor);
                if (!(object instanceof String)) {
                    if((boolean)object){
                        JOptionPane.showMessageDialog(this, "Uspesno ste izmenili odgovor");
                        localStorage.addItemsInHashMap("Odgovor", odgovor);
                        this.dispose();
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Neuspesna izmena odgovora");
                    }
                } else {
                    lblErrorSadrzaj.setVisible(true);
                    lblErrorSadrzaj.setText((String)object);
                    JOptionPane.showMessageDialog(this, "Neuspesno dodavanje odgovora");
                }
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje odgovora");
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblErrorSadrzaj;
    private javax.swing.JRadioButton rbNetacno;
    private javax.swing.JRadioButton rbTacno;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtSadrzaj;
    // End of variables declaration//GEN-END:variables


    private void prepareForm() {
        txtId.setEnabled(false);
        rbNetacno.setSelected(true);
        if(mode==FormView.FORM_ADD_MODE || mode==FormView.FORM_MODEL_ADD_ANSWER){
            odgovor = kreirajOdgovor();
            if(odgovor!=null){
                txtId.setText(Integer.toString(odgovor.getOdgovorId()));
            }
        }
        else if(mode==FormView.FORM_EDIT_MODE){
            odgovor = (Odgovor) localStorage.getItemFromHashMap("Odgovor");
            txtId.setText(Integer.toString(odgovor.getOdgovorId()));
            txtSadrzaj.setText(odgovor.getSadrzaj());
            if(odgovor.getResenje()==true){
                rbTacno.setSelected(true);
            }
            else{
                rbNetacno.setSelected(true);
            }
        }
        lblErrorSadrzaj.setVisible(false);
        lblErrorSadrzaj.setText("");
    }

    private Odgovor kreirajOdgovor() {
        try {
            Pitanje p = (Pitanje) localStorage.getItemFromHashMap("Pitanje");
            Odgovor o = new Odgovor();
            o.setResenje(false);
            o.setSadrzaj("");
            o.setPitanje(p);
            return Communication.getInstance().createOdgovor(o);
        } catch (Exception ex) {
            Logger.getLogger(OdgovorForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void setErrors() {
        lblErrorSadrzaj.setVisible(false);
        lblErrorSadrzaj.setText("");
    }

    private void checkErrors(String sadrzaj) {
        validator = new OpstiValidator();
        try {
            validator.validate(sadrzaj);
        } catch (ValidatorException ex) {
            lblErrorSadrzaj.setVisible(true);
            lblErrorSadrzaj.setText(ex.getMessage());
        }
    }
}
