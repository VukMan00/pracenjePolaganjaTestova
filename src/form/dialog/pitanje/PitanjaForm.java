/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form.dialog.pitanje;

import components.MyPitanjeTableModel;
import domain.Odgovor;
import domain.Pitanje;
import domain.Test;
import form.dialog.odgovor.OdgovoriForm;
import form.util.FormView;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.JOptionPane;
import session.LocalStorage;
import domain.PitanjeTest;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import communication.*;
import controller.Communication;
import java.io.IOException;

/**
 *
 * @author Vuk
 */
public class PitanjaForm extends javax.swing.JDialog {

    /**
     * Creates new form PitanjaForm
     */
    
    private LocalStorage localStorage = LocalStorage.getInstance();
    private int mode;
    private Test test;
    public PitanjaForm(java.awt.Frame parent, boolean modal,int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        test = (Test) localStorage.getItemFromHashMap("Test");
        prepareForm();
        populateTable();
        
        tblPitanja.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
                int selectedRow = tblPitanja.getSelectedRow();
                int selectedColumn = tblPitanja.getSelectedColumn();
                
                if(selectedColumn == 1){
                    Pitanje pitanje = ((MyPitanjeTableModel)tblPitanja.getModel()).getPitanja().get(selectedRow);
                    localStorage.addItemsInHashMap("Pitanje", pitanje);
                    OdgovoriForm odgovorForm = new OdgovoriForm(null,true);
                    odgovorForm.setTitleForPitanje("Odgovori za pitanje:" + pitanje);
                    odgovorForm.setVisible(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPitanja = new javax.swing.JTable();
        btnVratiPitanja = new javax.swing.JButton();
        lblPrikaz = new javax.swing.JLabel();
        btnDodaj = new javax.swing.JButton();
        btnIzmena = new javax.swing.JButton();
        btnIzbaci = new javax.swing.JButton();
        btnIzbrisi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblPitanja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPitanja);

        btnVratiPitanja.setText("Vrati pitanja");
        btnVratiPitanja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVratiPitanjaActionPerformed(evt);
            }
        });

        lblPrikaz.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        lblPrikaz.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrikaz.setText("jLabel1");

        btnDodaj.setText("Kreiraj pitanje");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnIzmena.setText("Izmeni pitanje");
        btnIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmenaActionPerformed(evt);
            }
        });

        btnIzbaci.setText("Izbaci pitanje");
        btnIzbaci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbaciActionPerformed(evt);
            }
        });

        btnIzbrisi.setText("Izbrisi pitanje");
        btnIzbrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbrisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPrikaz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVratiPitanja)
                        .addGap(18, 18, 18)
                        .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnIzmena, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnIzbrisi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnIzbaci, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblPrikaz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIzbaci)
                    .addComponent(btnIzmena)
                    .addComponent(btnDodaj)
                    .addComponent(btnVratiPitanja))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnIzbrisi)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVratiPitanjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVratiPitanjaActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = tblPitanja.getSelectedRows();
        if(selectedRows.length==0){
            JOptionPane.showMessageDialog(this, "Niste izabrali nijedno pitanje");
        }
        else{
            MyPitanjeTableModel myPitanjeTableModel = (MyPitanjeTableModel)tblPitanja.getModel();
            List<Pitanje> pitanja = new ArrayList<>();
            for(int i=0;i<selectedRows.length;i++){
                pitanja.add(myPitanjeTableModel.getPitanja().get(selectedRows[i]));
            }
            
            localStorage.addItemsInHashMap("VracenaPitanja", pitanja);
            
            JOptionPane.showMessageDialog(this,"Uspesno ste vratili pitanja");
            this.dispose();
        }   
    }//GEN-LAST:event_btnVratiPitanjaActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // TODO add your handling code here:
        PitanjeForm pitanjeForm = new PitanjeForm(null,true,FormView.FORM_ADD_MODE);
        pitanjeForm.setVisible(true);
        
        Pitanje pitanje = (Pitanje) localStorage.getItemFromHashMap("Pitanje");
        test.getPitanja().add(pitanje);
        populateTable();
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmenaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPitanja.getSelectedRow();
        if(selectedRow==-1){
            JOptionPane.showMessageDialog(this, "Niste izabrali pitanje");
        }
        else{
            Pitanje pitanje = ((MyPitanjeTableModel)tblPitanja.getModel()).getPitanja().get(selectedRow);
            localStorage.addItemsInHashMap("Pitanje", pitanje);
            PitanjeForm pitanjeForm = new PitanjeForm(null,true,FormView.FORM_EDIT_MODE);
            pitanjeForm.setVisible(true);
            pitanje = (Pitanje)localStorage.getItemFromHashMap("Pitanje");
            for(Pitanje p:test.getPitanja()){
                if(Objects.equals(p.getPitanjeId(), pitanje.getPitanjeId())){
                    p = pitanje;
                }
            }
            populateTable();
        }
    }//GEN-LAST:event_btnIzmenaActionPerformed

    private void btnIzbaciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbaciActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da izbacite pitanje?");
        if(option==0){
            int selectedRow = tblPitanja.getSelectedRow();
            
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "Niste izabrali pitanje");
            }
            else{
                brisanjePitanja(selectedRow, 0);
            }
        }
    }//GEN-LAST:event_btnIzbaciActionPerformed

    private void btnIzbrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbrisiActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da izbrisete pitanje?");
        if(option==0){
            int selectedRow = tblPitanja.getSelectedRow();
            
            if(selectedRow==-1){
                JOptionPane.showMessageDialog(this, "Niste izabrali pitanje");
            }
            else{
                brisanjePitanja(selectedRow, 1);
            }
        }
    }//GEN-LAST:event_btnIzbrisiActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzbaci;
    private javax.swing.JButton btnIzbrisi;
    private javax.swing.JButton btnIzmena;
    private javax.swing.JButton btnVratiPitanja;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPrikaz;
    private javax.swing.JTable tblPitanja;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        List<Pitanje> pitanja;
        if(mode==FormView.FORM_MODEL_GET_QUESTIONS_MODE){
            pitanja = (List<Pitanje>) localStorage.getItemFromHashMap("Pitanja");
        }
        else{
            if(!test.getPitanja().isEmpty()){
                pitanja = test.getPitanja();
            }
            else{
                pitanja = new ArrayList<>();
            }
        }
        tblPitanja.setModel(new MyPitanjeTableModel(pitanja));
    }
    
    public void setTitleForTest(String text){
        lblPrikaz.setText(text);
    }

    private void prepareForm() {
        if(mode==FormView.FORM_ADD_MODE || mode==FormView.FORM_VIEW_MODE){
            btnVratiPitanja.setVisible(false);
        }
        else if(mode==FormView.FORM_MODEL_GET_QUESTIONS_MODE){
            btnVratiPitanja.setVisible(true);
        }
        btnDodaj.setVisible(true);
        btnIzmena.setVisible(true);
        btnIzbaci.setVisible(true);
    }
    
    private void brisanjePitanja(int selectedRow,int opt){
        try {
            Pitanje pitanje = ((MyPitanjeTableModel) tblPitanja.getModel()).getPitanja().get(selectedRow);
            PitanjeTest pitanjeTest = new PitanjeTest(pitanje, test, 0);
            if(opt == 0 || opt==1){
                if (Communication.getInstance().deletePitanjeTest(pitanjeTest)) {
                    JOptionPane.showMessageDialog(this, "Uspesno ste izbacili pitanje iz testa!");
                    ((MyPitanjeTableModel) tblPitanja.getModel()).remove(pitanje);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Neuspesno izbacivanje pitanja!");
                }
            }
            if(opt==1){
                if (Communication.getInstance().deletePitanje(pitanje)) {
                    JOptionPane.showMessageDialog(this, "Uspesno ste izbrisali pitanje!");
                } else {
                    JOptionPane.showMessageDialog(this, "Neuspesno brisanje pitanja!");
                }
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    
}
